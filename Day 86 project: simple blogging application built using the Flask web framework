Link:  https://day86100days.codewithpapaa.repl.co/edit

Python Code:

from flask import Flask, redirect, session, request
from replit import db
import os

app = Flask(__name__,static_url_path="/static")
app.secret_key = os.environ['secretKey']

def getBlogs():
  entry = ""
  f = open("entry.html", "r")
  entry = f.read()
  f.close()
  keys = db.keys()
  keys = list(keys)
  content = ""
  for key in keys:
    thisEntry = entry
    if key != "user":
      thisEntry = thisEntry.replace("{title}", db[key]["title"])
      thisEntry = thisEntry.replace("{date}", db[key]["date"])
      thisEntry = thisEntry.replace("{body}", db[key]["body"])
      content += thisEntry
  return content  


@app.route('/')
def index():
  if session.get("user"):
    return redirect("/edit")
  page=""
  f =open("blog.html", "r")
  page = f.read()
  f.close()
  page = page.replace("{content}", getBlogs())
  return page
  

@app.route('/loginForm')
def loginForm():
  if session.get("user"):
    return redirect("/edit")
  page=""
  f =open("login.html", "r")
  page = f.read()
  f.close()
  return page

@app.route('/login', methods=["POST"])
def login():
  if session.get("user"):
    return redirect("/edit")
  form = request.form
  if form["username"] == db["user"]["username"] and form["password"] == db["user"]["password"]:
    session["user"] = True
    return redirect("/edit")
  else:
    return redirect("/loginForm")

@app.route("/edit")
def edit():
  if not session.get("user"):
    return redirect("/")
  page=""
  f =open("edit.html", "r")
  page = f.read()
  page = page.replace("{content}", getBlogs())
  f.close()
  return page

@app.route('/add', methods=["POST"])
def add():
  form = request.form
  entry = {"title": form["title"], "date" : form["date"], "body": form["body"]}
  db[form["date"]] = entry
  return redirect("/edit")

@app.route("/logout")
def logout():
  session.clear()
  return redirect("/")


app.run(host='0.0.0.0', port=81)


edit.html :

<html>
  <head>
    <title>Papaa's Blog</title>
    <link rel="stylesheet" href="/static/style.css"
    </head>
  <body>
    <h1>Papaa's Blog</h1>
    <button type="button" onClick="location.href='/logout'">Log out</button>
    <form method="post" action="/add">
      <p>Title: <input type="text" name="title"></p>
      <p>Date: <input type="date" name="date"></p>
      <p>Body Text: <input type="text" name="body"></p>
      <button type="submit">Save</button>
      <hr>
    {content}
  
  </body>
</html>



blog.html :

<html>
  <head>
    <title>Papaa's Blog</title>
    <link rel="stylesheet" href="/static/style.css"
    </head>
  <body>
    <h1>Papaa's Blog</h1>
    <button type="button" onClick="location.href='/loginForm'">Log in</button>
    {content}
  
  
  </body>
</html>

style.css :

body {
  background-color: #c6cbf6;
  font-family:sans-serif;  
  font-size: 10px;
  color:#1f2323;
}

h1{
  font-size: 14px;
  font-weight: bold;
  color: #000092;
}


login.html :

<html>
  <head>
    <title>Papaa's Blog</title>
    <link rel="stylesheet" href="/static/style.css"
    </head>
  <body>
    <form method="post" action="/login">
  <p>Username: <input type="text" name="username" required></p>
  <p>Password: <input type="password" name="password" required></p>
  <button type="submit">Log in</button>
</form>
  </body>
</html>


entry.html :

<h2>{title}</h2>
<h3>{date}</h3>
<p>{body}</p>
<hr>


Explanation:

Import Statements:

from flask import Flask, redirect, session, request
from replit import db
import os

This section imports necessary modules for the application. Flask is used for creating the web application, redirect is used for 
redirecting to different routes, session is used for managing user sessions, request is used for accessing request data, and db is
imported from replit for interacting with the database.


App Initialization:

app = Flask(__name__, static_url_path="/static")
app.secret_key = os.environ['secretKey']

The Flask app is initialized with a static_url_path for serving static files (like CSS or JavaScript). 
The secret_key is set from an environment variable for session security.


getBlogs Function:
This function retrieves blog entries from the database and generates HTML content for displaying them.


index Route:

@app.route('/')
def index():
   # ... (omitting the rest of the code for brevity)

This route handles the main page of the application. It redirects users to the /edit route if they are already logged in,
otherwise it renders the main blog page.


loginForm Route:

@app.route('/loginForm')
def loginForm():
   # ... (omitting the rest of the code for brevity)

This route renders the login form page, allowing users to enter their credentials.


login Route:

@app.route('/login', methods=["POST"])
def login():
   # ... (omitting the rest of the code for brevity)

This route handles the user login process. It compares the submitted username and password with the stored user credentials.
If they match, the user is redirected to the /edit page; otherwise, they are redirected back to the login form.


edit Route:

@app.route("/edit")
def edit():
   # ... (omitting the rest of the code for brevity)

This route renders the editing interface for users who are logged in. It displays existing blog entries and allows users to add
new entries.


add Route:

@app.route('/add', methods=["POST"])
def add():
   # ... (omitting the rest of the code for brevity)

This route handles adding new blog entries. It retrieves form data and adds the entry to the database before redirecting 
to the /edit page.


logout Route:

@app.route("/logout")
def logout():
   # ... (omitting the rest of the code for brevity)

This route clears the user's session when they log out and redirects them to the main page.


Running the App:

app.run(host='0.0.0.0', port=81)
This line starts the Flask development server to run the application, allowing it to be accessed from other devices on the network.


This script defines routes and functions to create a simple blogging application with login functionality, allowing users to add and 
edit blog posts. It uses Flask for the web framework and interacts with the replit database for storing blog post information.





